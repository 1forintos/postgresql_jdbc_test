#!/bin/bash
#
# @author Márton Kamrás
#
# The purpose of this script is to reproduce "FATAL:  the database system is starting up"
# log message generated by PostgreSQL 9.3.14 using a Docker container with 1 CPU core, ~ 600MHz.

command_exists() {
        command -v "$@" > /dev/null 2>&1
}

rm -rf logs

# install Docker containerization platform
echo "Do you want to install/update Docker? [Y/n]"
answer=-1
while [[ $answer != 'y' ]] && [[ $answer != 'Y' ]] && [[ $answer != "" ]] && [[ $answer != 'n' ]] && [[ $answer != 'N' ]]; do
    read -s -n 1 answer
    if [[ $answer == 'y' ]] || [[ $answer == 'Y' ]] || [[ $answer == "" ]] ; then
        echo "Running Docker intaller script..."
        chmod +x install_docker.sh
        ./install_docker.sh
    elif [[ $answer == 'n' ]] || [[ $answer == 'N' ]]; then
        if ! command_exists docker; then
            echo "Docker was not found on your system and it is required for this script to run."
            exit;
        fi
    fi
done

# install java
recommended=false
if [[ "$_java" ]]; then
    version=$("$_java" -version 2>&1 | awk -F '"' '/version/ {print $2}')
    if [[ "$version" != 1.7* ]] ; then
        recommended=true
    fi
fi

if ! command_exists java || [ recommended ] ; then
    echo "Do you want to install Java 1.7? [Y/n]"
    answer=-1
    while [[ $answer != 'y' ]] && [[ $answer != 'Y' ]] && [[ $answer != "" ]] && [[ $answer != 'n' ]] && [[ $answer != 'N' ]]; do
        read -s -n 1 answer
        if [[ $answer == 'y' ]] || [[ $answer == 'Y' ]] || [[ $answer == "" ]] ; then
            echo "Installing Java 1.7..."
            add-apt-repository ppa:webupd8team/java
            apt-get update
            apt-get install oracle-java7-installer
        elif [[ $answer == 'n' ]] || [[ $answer == 'N' ]]; then
            if ! command_exists java; then
                echo "Java is required for this script to run."
                exit;
            fi
        fi
    done
fi

# stop all previously started containers in case they exists
docker stop $(docker ps -a -q)

dockerImageName="ubuntu_14.04/pg_9.3.14:latest"
dockerContainerName="postgres_9.3.14"

# remove generated content of previous runs
docker rm $dockerContainerName
docker rmi $dockerImageName

# build docker image
echo "Building docker image..."
docker build . -f Dockerfile -t $dockerImageName

# determining CPU quota to achieve ~600MHz clock speed
maxClockSpeed=$(lscpu | grep 'CPU max MHz' | awk '{ print $4; }')

let cpuQuota=50000000/$maxClockSpeed
#let cpuQuota=$maxClockSpeed

echo "Max CPU clock speed: $maxClockSpeed MHz"
let quotaPercentage=$cpuQuota/1000
echo "CPU quota for docker container: ~ $quotaPercentage%"

# create and start container
CID=$(docker run -it --name $dockerContainerName --cpuset-cpus="0" --cpu-quota=$cpuQuota -d $dockerImageName)
echo "Container ID: $CID"
CIP=$(docker inspect $CID | grep \"IPAddress\" | head -1 | cut -d '"' -f 4)
echo "Container IP: $CIP"
docker exec $dockerContainerName service postgresql restart

sleep 20
echo "Generating dummy data for database (this could take a long time)..."
./generator_script.py -d $CIP -u postgres -p postgres -t 5 -c 10 -r 180000 -m

sleep 10

echo "Running PostgreSQL error generating script..."
chmod +x test_db.sh
./test_db.sh $CIP postgresql://postgres@${CIP}:5432 & PID=$!

echo "Running test for 5 minutes..."
sleep 300
kill $PID
sleep 5

echo "Copying PostgreSQL logs into ./pg_log..."
docker cp $dockerContainerName:/pg_log logs/
chmod 755 -R logs/pg_log

docker exec $dockerContainerName service postgresql restart
